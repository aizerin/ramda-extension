[{"aka":[],"category":"Function","deprecated":"","description":"<p>Always returns a new empty array.</p>\n","example":"R_.alwaysEmptyArray() <span class=\"hljs-comment\">// []</span>","name":"alwaysEmptyArray","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Array"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Always returns a new empty object.</p>\n","example":"R_.alwaysEmptyObject() <span class=\"hljs-comment\">// {}</span>","name":"alwaysEmptyObject","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Object"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Always returns empty string.</p>\n","example":"R_.alwaysEmptyString() <span class=\"hljs-comment\">// ''</span>","name":"alwaysEmptyString","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → String"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Always returns null.</p>\n","example":"R_.alwaysNull() <span class=\"hljs-comment\">// null</span>","name":"alwaysNull","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Object"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Always returns number one.</p>\n","example":"R_.alwaysOne() <span class=\"hljs-comment\">// 1</span>","name":"alwaysOne","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["* → Number"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Always returns zero.</p>\n","example":"R_.alwaysZero() <span class=\"hljs-comment\">// 0</span>","name":"alwaysZero","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["* → Number"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Applies composition by a list of functions.</p>\n","example":"R_.applyCompose([multiply(<span class=\"hljs-number\">2</span>), add(<span class=\"hljs-number\">1</span>)])(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// 8</span>","name":"applyCompose","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["[(a → b)] → a → b"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Call apply on function if the function is defined. Otherwise do nothing and return null.</p>\n","example":"<span class=\"hljs-keyword\">const</span> nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\nR_.applyIfNotNil(R.sum, nums) <span class=\"hljs-comment\">// 6</span>\nR_.applyIfNotNil(<span class=\"hljs-literal\">undefined</span>, nums) <span class=\"hljs-comment\">// null</span>","name":"applyIfNotNil","params":[{"description":"<p>The function which will be called with <code>args</code> when defined</p>\n","name":"fn","type":"function"},{"description":"<p>The arguments to call <code>fn</code> with</p>\n","name":"args","type":"Array"}],"returns":{"description":"result The result, equivalent to `fn(...args)` or null","type":"*"},"see":[],"sigs":["(*… → a) → [*] → a"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Applies pipe by to a list of functions.</p>\n","example":"R_.applyPipe([multiply(<span class=\"hljs-number\">2</span>), add(<span class=\"hljs-number\">1</span>)])(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// 7</span>","name":"applyPipe","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["[(a → b)] → a → b"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Converts arguments to list.</p>\n","example":"R.compose(R.sum, R_.argumentsToList)(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// 6</span>","name":"argumentsToList","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["(a, b, c, …) → ([a, b, c, …])"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Makes a shallow clone of an object, setting or overriding the nodes required\nto create the given path, and placing the specific value at the tail end of\nthat path.</p>\n","example":"R_.assocDotPath(<span class=\"hljs-string\">'a.b.c'</span>, <span class=\"hljs-number\">42</span>, {<span class=\"hljs-attr\">a</span>: {<span class=\"hljs-attr\">b</span>: {<span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">0</span>}}}); <span class=\"hljs-comment\">//=&gt; {a: {b: {c: 42}}}</span>\n\n<span class=\"hljs-comment\">// Any missing or non-object keys in path will be overridden</span>\nR_.assocDotPath(<span class=\"hljs-string\">'a.b.c'</span>, <span class=\"hljs-number\">42</span>, {<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">5</span>}); <span class=\"hljs-comment\">//=&gt; {a: {b: {c: 42}}}</span>","name":"assocDotPath","params":[{"description":"<p>the dot path to set</p>\n","name":"path","type":"String"},{"description":"<p>The new value</p>\n","name":"val","type":"*"},{"description":"<p>The object to clone</p>\n","name":"obj","type":"Object"}],"returns":{"description":"A new object equivalent to the original except along the specified path.","type":"Object"},"see":[],"sigs":["String → a → b"],"since":"","typedefns":[]},{"aka":[],"category":"Type","deprecated":"","description":"<p>See if an number (<code>val</code>) is within an array of two numbers (&#39;list&#39;).</p>\n","example":"R_.between(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">//=&gt; true</span>\nR_.between(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2.1</span>); <span class=\"hljs-comment\">//=&gt; false</span>\nR_.between(<span class=\"hljs-number\">100.1</span>, <span class=\"hljs-number\">102</span>, <span class=\"hljs-number\">100.1</span>); <span class=\"hljs-comment\">//=&gt; true</span>","name":"between","params":[{"description":"<p>Starting value</p>\n","name":"a","type":"Number"},{"description":"<p>Ending value</p>\n","name":"b","type":"Number"},{"description":"<p>The value to test</p>\n","name":"val","type":"Number"}],"returns":{"description":"","type":"Boolean"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Transform recursevely all keys within object</p>\n","example":"camelizeKeys({\n<span class=\"hljs-string\">'co-obj'</span>: { <span class=\"hljs-attr\">co_string</span>: <span class=\"hljs-string\">'foo'</span> },\n<span class=\"hljs-string\">'co-array'</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">null</span>, { <span class=\"hljs-string\">'f-f'</span>: <span class=\"hljs-string\">'ff'</span> }],\n<span class=\"hljs-string\">'co-number'</span>: <span class=\"hljs-number\">1</span>,\n<span class=\"hljs-string\">'co-string'</span>: <span class=\"hljs-string\">'1'</span>,\n<span class=\"hljs-string\">'co-fn'</span>: head,\n});\n\n<span class=\"hljs-comment\">// {</span>\n<span class=\"hljs-comment\">//     coArray: [</span>\n<span class=\"hljs-comment\">//         0,</span>\n<span class=\"hljs-comment\">//         null,</span>\n<span class=\"hljs-comment\">//         {</span>\n<span class=\"hljs-comment\">//             fF: 'ff'</span>\n<span class=\"hljs-comment\">//         }</span>\n<span class=\"hljs-comment\">//     ],</span>\n<span class=\"hljs-comment\">//     coFn: {},</span>\n<span class=\"hljs-comment\">//     coNumber: 1,</span>\n<span class=\"hljs-comment\">//     coObj: {</span>\n<span class=\"hljs-comment\">//         coString: 'foo'</span>\n<span class=\"hljs-comment\">//     },</span>\n<span class=\"hljs-comment\">//     coString: '1'</span>\n<span class=\"hljs-comment\">// }</span>","name":"camelizeKeys","params":[{"description":"<p>Object to transform</p>\n","name":"x","type":"any"}],"returns":{"description":"","type":"any"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Creates curried compose. The rightmost function determines the arity of curry.</p>\n","example":"<span class=\"hljs-keyword\">const</span> appendAndRejectNil = R_.composeC(R.rejectNil, R.append);\n<span class=\"hljs-keyword\">const</span> appendCAndRejectNil = appendAndRejectNil(<span class=\"hljs-string\">'c'</span>);\nappendCAndRejectNil([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>]) <span class=\"hljs-comment\">// ['a', 'c'];</span>","name":"composeC","params":[],"returns":{"description":"","type":""},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Constructs RegExp.</p>\n","example":"test(R_.constructRegExp(<span class=\"hljs-string\">'end$'</span>, <span class=\"hljs-string\">'gi'</span>), <span class=\"hljs-string\">'in the end'</span>) <span class=\"hljs-comment\">// true</span>","name":"constructRegExp","params":[],"returns":{"description":"","type":""},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Resolves to true if all elements in first list are found within the second list</p>\n","example":"R_.containsAll([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]) <span class=\"hljs-comment\">// true</span>\nR_.containsAll([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'d'</span>], [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]) <span class=\"hljs-comment\">// false</span>","name":"containsAll","params":[{"description":"","name":"List","type":"Array"},{"description":"","name":"List","type":"Array"}],"returns":{"description":"If all items from first array are in the second array.","type":"Boolean"},"see":[],"sigs":["[a] → [a] → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns <code>true</code> if any of the items from first array are in the second array.</p>\n","example":"R_.containsAny([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'e'</span>], [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]) <span class=\"hljs-comment\">// true</span>\nR_.containsAny([<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>], [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]) <span class=\"hljs-comment\">// false</span>","name":"containsAny","params":[{"description":"","name":"List","type":"Array"},{"description":"","name":"List","type":"Array"}],"returns":{"description":"If any of the items from first array are in the second array.","type":"Boolean"},"see":[],"sigs":["[a] → [a] → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns <code>true</code> if any of the items from first array is not the second array.</p>\n","example":"R_.containsNone([<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>], [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]) <span class=\"hljs-comment\">// true</span>\nR_.containsNone([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'f'</span>], [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]) <span class=\"hljs-comment\">// false</span>","name":"containsNone","params":[{"description":"","name":"List","type":"Array"},{"description":"","name":"List","type":"Array"}],"returns":{"description":"If any of the items from first array is not in the second array.","type":"Boolean"},"see":[],"sigs":["[a] → [a] → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Conditionally joining classNames together.</p>\n<p>The cx function takes any number of arguments which can be a string, object\neven nested arrays of strings and objects.</p>\n<p>The argument &#39;foo&#39; is short for { foo: true }.</p>\n<p>If the value associated with a given key is falsy, that key won&#39;t be included in the output.</p>\n","example":"R_.cx(<span class=\"hljs-string\">'Table'</span>, [<span class=\"hljs-string\">'MagicTable'</span>], {<span class=\"hljs-string\">'Table--active'</span>: <span class=\"hljs-literal\">true</span> })\t<span class=\"hljs-comment\">// 'Table MagicTable Table--active'</span>\nR_.cx(<span class=\"hljs-string\">'Table'</span>, [<span class=\"hljs-string\">'MagicTable'</span>], {<span class=\"hljs-string\">'Table--active'</span>: <span class=\"hljs-literal\">false</span> })\t<span class=\"hljs-comment\">// 'Table MagicTable'</span>\nR_.cx([<span class=\"hljs-string\">'Table'</span>, [<span class=\"hljs-string\">'MagicTable'</span>]])\t\t\t\t<span class=\"hljs-comment\">// 'Table MagicTable'</span>","name":"cx","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String | [String] | Object → String"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns the argument if it is not null, undefined or NaN; otherwise the empty array is returned.</p>\n","example":"R_.defaultToEmptyArray(<span class=\"hljs-literal\">null</span>);  <span class=\"hljs-comment\">//=&gt; []</span>\nR_.defaultToEmptyArray(<span class=\"hljs-literal\">undefined</span>);  <span class=\"hljs-comment\">//=&gt; []</span>\nR_.defaultToEmptyArray(<span class=\"hljs-string\">'Ramda'</span>);  <span class=\"hljs-comment\">//=&gt; 'Ramda'</span>\n<span class=\"hljs-comment\">// parseInt('string') results in NaN</span>\nR_.defaultToEmptyArray(<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'string'</span>)); <span class=\"hljs-comment\">//=&gt; []</span>","name":"defaultToEmptyArray","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → a | Array"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns the argument if it is not null, undefined or NaN; otherwise the empty object is returned.</p>\n","example":"R_.defaultToEmptyObject(<span class=\"hljs-literal\">null</span>);  <span class=\"hljs-comment\">//=&gt; {}</span>\nR_.defaultToEmptyObject(<span class=\"hljs-literal\">undefined</span>);  <span class=\"hljs-comment\">//=&gt; {}</span>\nR_.defaultToEmptyObject(<span class=\"hljs-string\">'Ramda'</span>);  <span class=\"hljs-comment\">//=&gt; 'Ramda'</span>\n<span class=\"hljs-comment\">// parseInt('string') results in NaN</span>\nR_.defaultToEmptyObject(<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'string'</span>)); <span class=\"hljs-comment\">//=&gt; {}</span>","name":"defaultToEmptyObject","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → a | Object"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns the argument if it is not null, undefined or NaN; otherwise the empty string is returned.</p>\n","example":"R_.defaultToEmptyString(<span class=\"hljs-literal\">null</span>);  <span class=\"hljs-comment\">//=&gt; \"\"</span>\nR_.defaultToEmptyString(<span class=\"hljs-literal\">undefined</span>);  <span class=\"hljs-comment\">//=&gt; \"\"</span>\nR_.defaultToEmptyString(<span class=\"hljs-string\">'Ramda'</span>);  <span class=\"hljs-comment\">//=&gt; 'Ramda'</span>\n<span class=\"hljs-comment\">// parseInt('string') results in NaN</span>\nR_.defaultToEmptyString(<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'string'</span>)); <span class=\"hljs-comment\">//=&gt; \"\"</span>","name":"defaultToEmptyString","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → a | String"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns the argument if it is not null, undefined or NaN; otherwise the false is returned.</p>\n","example":"R_.defaultToFalse(<span class=\"hljs-literal\">null</span>);  <span class=\"hljs-comment\">//=&gt; false</span>\nR_.defaultToFalse(<span class=\"hljs-literal\">undefined</span>);  <span class=\"hljs-comment\">//=&gt; false</span>\nR_.defaultToFalse(<span class=\"hljs-string\">'Ramda'</span>);  <span class=\"hljs-comment\">//=&gt; 'Ramda'</span>\n<span class=\"hljs-comment\">// parseInt('string') results in NaN</span>\nR_.defaultToFalse(<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'string'</span>)); <span class=\"hljs-comment\">//=&gt; false</span>","name":"defaultToFalse","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → a | Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns the argument if it is not null, undefined or NaN; otherwise number one is returned.</p>\n","example":"R_.defaultToOne(<span class=\"hljs-literal\">null</span>);  <span class=\"hljs-comment\">//=&gt; 1</span>\nR_.defaultToOne(<span class=\"hljs-literal\">undefined</span>);  <span class=\"hljs-comment\">//=&gt; 1</span>\nR_.defaultToOne(<span class=\"hljs-string\">'Ramda'</span>);  <span class=\"hljs-comment\">//=&gt; 'Ramda'</span>\n<span class=\"hljs-comment\">// parseInt('string') results in NaN</span>\nR_.defaultToOne(<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'string'</span>)); <span class=\"hljs-comment\">//=&gt; 1</span>","name":"defaultToOne","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → a | Number"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns the argument if it is not null, undefined or NaN; otherwise true is returned.</p>\n","example":"R_.defaultToTrue(<span class=\"hljs-literal\">null</span>);  <span class=\"hljs-comment\">//=&gt; true</span>\nR_.defaultToTrue(<span class=\"hljs-literal\">undefined</span>);  <span class=\"hljs-comment\">//=&gt; true</span>\nR_.defaultToTrue(<span class=\"hljs-string\">'Ramda'</span>);  <span class=\"hljs-comment\">//=&gt; 'Ramda'</span>\n<span class=\"hljs-comment\">// parseInt('string') results in NaN</span>\nR_.defaultToTrue(<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'string'</span>)); <span class=\"hljs-comment\">//=&gt; true</span>","name":"defaultToTrue","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → a | Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns the argument if it is not null, undefined or NaN; otherwise zero is returned.</p>\n","example":"R_.defaultToZero(<span class=\"hljs-literal\">null</span>);  <span class=\"hljs-comment\">//=&gt; 0</span>\nR_.defaultToZero(<span class=\"hljs-literal\">undefined</span>);  <span class=\"hljs-comment\">//=&gt; 0</span>\nR_.defaultToZero(<span class=\"hljs-string\">'Ramda'</span>);  <span class=\"hljs-comment\">//=&gt; 'Ramda'</span>\n<span class=\"hljs-comment\">// parseInt('string') results in NaN</span>\nR_.defaultToZero(<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'string'</span>)); <span class=\"hljs-comment\">//=&gt; 0</span>","name":"defaultToZero","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → a | Number"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Returns first not nil result from evaluation of functions in the list.\nReturns <code>undefined</code> otherwise.</p>\n","example":"<span class=\"hljs-keyword\">const</span> validateName = R_.dispatch([\nifElse(<span class=\"hljs-built_in\">Boolean</span>, R_.noop, always(<span class=\"hljs-string\">'Name is required.'</span>)),\nifElse(R_.isString, R_.noop, always(<span class=\"hljs-string\">'Name must be valid.'</span>)),\n]);\n\nvalidateName(<span class=\"hljs-string\">\"\"</span>) <span class=\"hljs-comment\">// 'Name is required.'</span>\nvalidateName(<span class=\"hljs-number\">111</span>) <span class=\"hljs-comment\">// 'Name must be valid.'</span>\nvalidateName(<span class=\"hljs-string\">\"Valid name\"</span>) <span class=\"hljs-comment\">// undefined</span>","name":"dispatch","params":[{"description":"<p>List of functions</p>\n","name":"listFns","type":"array"},{"description":"<p>Values applied to functions from <code>listFns</code></p>\n","name":"values","type":"*"}],"returns":{"description":"Returns first not nil result of calling fn from `listFns` with `values`.","type":"any"},"see":["dispatchWith"],"sigs":["[a] → b|undefined"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Returns first result from evaluation of functions in the list, that satisfies predicate.\nReturns <code>undefined</code> otherwise.</p>\n","example":"<span class=\"hljs-keyword\">const</span> firstTruthy = R_.dispatchWith(<span class=\"hljs-built_in\">Boolean</span>)([\nprop(<span class=\"hljs-string\">\"foo\"</span>),\nprop(<span class=\"hljs-string\">\"bar\"</span>),\n])\n\nfirstTruthy({<span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-literal\">false</span>}) <span class=\"hljs-comment\">// \"foo\"</span>\nfirstTruthy({<span class=\"hljs-attr\">foo</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">\"bar\"</span> }) <span class=\"hljs-comment\">// \"bar\"</span>","name":"dispatchWith","params":[{"description":"<p>Predicate that is applied to result of calling fn from <code>listFns</code> with <code>values</code></p>\n","name":"predicate","type":"function"},{"description":"<p>List of functions</p>\n","name":"listFns","type":"array"},{"description":"<p>Values applied to functions from <code>listFns</code></p>\n","name":"values","type":"*"}],"returns":{"description":"Returns first result of calling fn from `listFns` with `values` that satisfies `predicate`.","type":"any"},"see":["dispatch"],"sigs":["[a] → b|undefined"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Makes a shallow clone of an object, omitting the property at the given dot path.\nNote that this copies and flattens\nprototype properties onto the new object as well. All non-primitive properties are copied by reference.</p>\n","example":"R_.dissocDotPath(<span class=\"hljs-string\">'a.b.c'</span>, {<span class=\"hljs-attr\">a</span>: {<span class=\"hljs-attr\">b</span>: {<span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">42</span>}}}); <span class=\"hljs-comment\">//=&gt; {a: {b: {}}}</span>","name":"dissocDotPath","params":[{"description":"<p>The dot path to the value to omit</p>\n","name":"path","type":"String"},{"description":"<p>The object to clone</p>\n","name":"obj","type":"Object"}],"returns":{"description":"A new object without the property at path","type":"Object"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Retrieve the value at a given dot path.</p>\n","example":"R_.dotPath(<span class=\"hljs-string\">'a.b'</span>, {<span class=\"hljs-attr\">a</span>: {<span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>}}); <span class=\"hljs-comment\">//=&gt; 2</span>\nR_.dotPath(<span class=\"hljs-string\">'a.b'</span>, {<span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>}}); <span class=\"hljs-comment\">//=&gt; undefined</span>","name":"dotPath","params":[{"description":"<p>The dot path to use.</p>\n","name":"path","type":"String"},{"description":"<p>The object to retrieve the nested property from.</p>\n","name":"obj","type":"Object"}],"returns":{"description":"The data at `path`.","type":"*"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Determines whether a dot path on an object has a specific value\nin <code>R.equals</code> terms.</p>\n","example":"R_.dotPathEq(<span class=\"hljs-string\">'a.b'</span>, <span class=\"hljs-number\">2</span>, {<span class=\"hljs-attr\">a</span>: {<span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>}}); <span class=\"hljs-comment\">//=&gt; true</span>\nR_.dotPathEq(<span class=\"hljs-string\">'a.b'</span>, <span class=\"hljs-number\">2</span>, {<span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>}}); <span class=\"hljs-comment\">//=&gt; false</span>","name":"dotPathEq","params":[{"description":"<p>The dot path to use.</p>\n","name":"path","type":"String"},{"description":"<p>Value for <code>R.equals</code>.</p>\n","name":"eq","type":"any"},{"description":"<p>The object to retrieve the nested property from and compare with <code>eq</code>.</p>\n","name":"obj","type":"Object"}],"returns":{"description":"True if value on dot path equals to `eq`.","type":"*"},"see":[],"sigs":["String → a → {a} → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Determines whether a dot path on an object has a specific value\nin <code>R_.notEqual</code> terms.</p>\n","example":"R_.dotPathNotEq(<span class=\"hljs-string\">'a.b'</span>, <span class=\"hljs-number\">2</span>, {<span class=\"hljs-attr\">a</span>: {<span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>}}); <span class=\"hljs-comment\">//=&gt; false</span>\nR_.dotPathNotEq(<span class=\"hljs-string\">'a.b'</span>, <span class=\"hljs-number\">2</span>, {<span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>}}); <span class=\"hljs-comment\">//=&gt; true</span>","name":"dotPathNotEq","params":[{"description":"<p>The dot path to use.</p>\n","name":"path","type":"String"},{"description":"<p>Value for <code>R_.notEqual</code>.</p>\n","name":"eq","type":"any"},{"description":"<p>The object to retrieve the nested property from and compare with <code>eq</code>.</p>\n","name":"obj","type":"Object"}],"returns":{"description":"True if value on dot path equals to `eq`.","type":"*"},"see":[],"sigs":["String → a → {a} → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Returns <code>true</code> if the specified object property at given dot path not satisfies the given predicate; false otherwise.</p>\n","example":"R_.dotPathNotSatisfies(<span class=\"hljs-function\">(<span class=\"hljs-params\">y</span>) =&gt;</span> y &gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'a.b'</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> } }); <span class=\"hljs-comment\">// false</span>\nR_.dotPathNotSatisfies(<span class=\"hljs-function\">(<span class=\"hljs-params\">y</span>) =&gt;</span> y &gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'a.b'</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">-1</span> } }); <span class=\"hljs-comment\">// true</span>\nR_.dotPathNotSatisfies(<span class=\"hljs-function\">(<span class=\"hljs-params\">y</span>) =&gt;</span> y &gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'a.b'</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">1</span> } }); <span class=\"hljs-comment\">// true</span>","name":"dotPathNotSatisfies","params":[{"description":"","name":"predicate","type":"function"},{"description":"<p>The dot path to use.</p>\n","name":"path","type":"String"},{"description":"","name":"obj","type":"Object"}],"returns":{"description":"","type":"Boolean"},"see":[],"sigs":["(a → Boolean) → String → {a} → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>If the given, non-null object has a value at the given dot path,\nreturns the value at that path. Otherwise returns the provided default value.</p>\n","example":"R_.dotPathOr(<span class=\"hljs-string\">'N/A'</span>, <span class=\"hljs-string\">'a.b'</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> } }); <span class=\"hljs-comment\">// 1</span>\nR_.dotPathOr(<span class=\"hljs-string\">'N/A'</span>, <span class=\"hljs-string\">'a.b'</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">1</span> } }); <span class=\"hljs-comment\">// \"N/A\"</span>","name":"dotPathOr","params":[{"description":"<p>Default value if <code>path</code> does not exist.</p>\n","name":"default","type":"any"},{"description":"<p>The dot path to use.</p>\n","name":"path","type":"String"},{"description":"","name":"obj","type":"Object"}],"returns":{"description":"The data at `path` of the supplied object or the default value.","type":"*"},"see":[],"sigs":["a → String → {a} → a"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Returns <code>true</code> if the specified object property at given dot path satisfies the given predicate; false otherwise.</p>\n","example":"R_.dotPathSatisfies(<span class=\"hljs-function\">(<span class=\"hljs-params\">y</span>) =&gt;</span> y &gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'a.b'</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> } }); <span class=\"hljs-comment\">// true</span>\nR_.dotPathSatisfies(<span class=\"hljs-function\">(<span class=\"hljs-params\">y</span>) =&gt;</span> y &gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'a.b'</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">-1</span> } }); <span class=\"hljs-comment\">// false</span>\nR_.dotPathSatisfies(<span class=\"hljs-function\">(<span class=\"hljs-params\">y</span>) =&gt;</span> y &gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'a.b'</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">1</span> } }); <span class=\"hljs-comment\">// false</span>","name":"dotPathSatisfies","params":[{"description":"","name":"predicate","type":"function"},{"description":"<p>The dot path to use.</p>\n","name":"path","type":"String"},{"description":"","name":"obj","type":"Object"}],"returns":{"description":"","type":"Boolean"},"see":[],"sigs":["(a → Boolean) → String → {a} → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Creates pair. Every item of pair equals to input parameter.</p>\n","example":"R_.duplicate(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// [1, 1]</span>","name":"duplicate","params":[{"description":"<p>Value for duplication</p>\n","name":"input","type":"a"}],"returns":{"description":"List Pair in which every item equals to `input` parameter","type":""},"see":[],"sigs":["a → [a]"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Testing string if ends with some suffix.</p>\n","example":"R_.endsWithSuffix(<span class=\"hljs-string\">'o'</span>, <span class=\"hljs-string\">'hello'</span>)\t\t<span class=\"hljs-comment\">// true</span>\nR_.endsWithSuffix(<span class=\"hljs-string\">'ello'</span>, <span class=\"hljs-string\">'hello'</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.endsWithSuffix(<span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'good bye'</span>)\t<span class=\"hljs-comment\">// false</span>","name":"endsWithSuffix","params":[{"description":"","name":"suffix","type":"string"},{"description":"","name":"x","type":"string"}],"returns":{"description":"True if `x` ends with `suffix`","type":"boolean"},"see":[],"sigs":["a → b → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":true,"description":"<p>Alias for <code>equalsToEmptyString</code>.</p>\n","example":"R_.equalsEmptyString(<span class=\"hljs-string\">''</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsEmptyString(<span class=\"hljs-string\">'hi'</span>)\t<span class=\"hljs-comment\">// false</span>","name":"equalsEmptyString","params":[],"returns":{"description":"","type":""},"see":["equalsToEmptyString"],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns true if length of array equals first argument</p>\n","example":"<span class=\"hljs-keyword\">const</span> lengthEqualsOne = R_.equalsLength(<span class=\"hljs-number\">1</span>)\nlengthEqualsOne([{}])\t<span class=\"hljs-comment\">// true</span>\nlengthEqualsOne([])\t<span class=\"hljs-comment\">// false</span>","name":"equalsLength","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["Number → [a] → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Testing string if equals ignoring case.</p>\n","example":"R_.equalsStringIgnoreCase(<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'HELLO'</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsStringIgnoreCase(<span class=\"hljs-string\">'HELLO'</span>, <span class=\"hljs-string\">'hello'</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsStringIgnoreCase(<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'hello'</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsStringIgnoreCase(<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'good bye'</span>)\t<span class=\"hljs-comment\">// false</span>","name":"equalsStringIgnoreCase","params":[{"description":"","name":"x","type":"string"},{"description":"","name":"y","type":"string"}],"returns":{"description":"True if `x` equals `y` ignore case","type":"boolean"},"see":[],"sigs":["a → b → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Testing if argument equals to empty array.</p>\n","example":"R_.equalsToEmptyArray([])\t<span class=\"hljs-comment\">// true</span>\nR_.equalsToEmptyArray([<span class=\"hljs-string\">''</span>])\t<span class=\"hljs-comment\">// false</span>","name":"equalsToEmptyArray","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"True if `value` is empty array.","type":"boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Testing if argument equals to empty object.</p>\n","example":"R_.equalsToEmptyObject({})\t<span class=\"hljs-comment\">// true</span>\nR_.equalsToEmptyObject(<span class=\"hljs-string\">''</span>)\t<span class=\"hljs-comment\">// false</span>","name":"equalsToEmptyObject","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"True if `value` is empty object.","type":"boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Testing if argument equals to &#39;&#39;</p>\n","example":"R_.equalsToEmptyString(<span class=\"hljs-string\">''</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsToEmptyString(<span class=\"hljs-string\">'hi'</span>)\t<span class=\"hljs-comment\">// false</span>","name":"equalsToEmptyString","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"True if `value` is empty string","type":"boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Testing if argument equals to false</p>\n","example":"R_.equalsToFalse(<span class=\"hljs-literal\">false</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsToFalse(<span class=\"hljs-literal\">null</span>)\t<span class=\"hljs-comment\">// false</span>","name":"equalsToFalse","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"True if `value` is false","type":"boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Testing if argument equals to null</p>\n","example":"R_.equalsToNull(<span class=\"hljs-literal\">null</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsToNull(<span class=\"hljs-literal\">undefined</span>)\t<span class=\"hljs-comment\">// false</span>","name":"equalsToNull","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"True if `value` is null","type":"boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if argument equals to 0.</p>\n","example":"R_.equalsToOne(<span class=\"hljs-number\">3</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.equalsToOne(<span class=\"hljs-number\">0</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsToOne(<span class=\"hljs-number\">-3</span>)\t<span class=\"hljs-comment\">// false</span>","name":"equalsToOne","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"True if `value` is 1","type":"boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Testing if argument equals to true</p>\n","example":"R_.equalsToTrue(<span class=\"hljs-literal\">true</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsToTrue(<span class=\"hljs-literal\">false</span>)\t<span class=\"hljs-comment\">// false</span>","name":"equalsToTrue","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"True if `value` is true","type":"boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if argument equals to 1.</p>\n","example":"R_.equalsToZero(<span class=\"hljs-number\">3</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.equalsToZero(<span class=\"hljs-number\">1</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsToZero(<span class=\"hljs-number\">-3</span>)\t<span class=\"hljs-comment\">// false</span>","name":"equalsToZero","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"True if `value` is 0","type":"boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":true,"description":"<p>Alias for <code>equalsToZero</code>.</p>\n","example":"R_.equalsZero(<span class=\"hljs-number\">3</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.equalsZero(<span class=\"hljs-number\">1</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.equalsZero(<span class=\"hljs-number\">-3</span>)\t<span class=\"hljs-comment\">// false</span>","name":"equalsZero","params":[],"returns":{"description":"","type":""},"see":["equalsToZero"],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns first not nil value</p>\n","example":"R_.findNotNil([<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">true</span>]) <span class=\"hljs-comment\">// 0</span>","name":"findNotNil","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["[a] → a"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Applies flatten on array of arguments</p>\n","example":"R_.flattenArgs(<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'a'</span>)\t\t<span class=\"hljs-comment\">// ['e', 'f', 'a']</span>\nR_.flattenArgs(<span class=\"hljs-string\">'e'</span>, [<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'a'</span>])\t\t<span class=\"hljs-comment\">// ['e', 'f', 'a']</span>\nR_.flattenArgs(<span class=\"hljs-string\">'e'</span>, [<span class=\"hljs-string\">'f'</span>, [<span class=\"hljs-string\">'a'</span>]])\t<span class=\"hljs-comment\">// ['e', 'f', 'a']</span>","name":"flattenArgs","params":[],"returns":{"description":"flatten array","type":"Array"},"see":[],"sigs":["(a, [b, c]…) → [a, b, c]"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns true if length of array is smaller or equals than first argument</p>\n","example":"<span class=\"hljs-keyword\">const</span> lengthSmallerThanEqualsOne = R_.gteThanLength(<span class=\"hljs-number\">1</span>)\nlengthSmallerThanEqualsTwo([{},{}])\t<span class=\"hljs-comment\">// false</span>\nlengthSmallerThanEqualsTwo([{}])\t<span class=\"hljs-comment\">// true</span>\nlengthSmallerThanEqualsTwo([])\t\t<span class=\"hljs-comment\">// true</span>","name":"gteThanLength","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["Number → [a] → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns true if length of array is smaller than first argument</p>\n","example":"<span class=\"hljs-keyword\">const</span> lengthSmallerThanTwo = R_.gtThanLength(<span class=\"hljs-number\">2</span>)\nlengthSmallerThanTwo([{}])\t<span class=\"hljs-comment\">// true</span>\nlengthSmallerThanTwo([{},{}])\t<span class=\"hljs-comment\">// false</span>","name":"gtThanLength","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["Number → [a] → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Takes first argument from the arguments</p>\n","example":"R_.headArg(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>) <span class=\"hljs-comment\">// a</span>","name":"headArg","params":[],"returns":{"description":"","type":""},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns <code>true</code> if if <code>list</code> includes <code>item</code>.</p>\n","example":"R_.includes([<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>], <span class=\"hljs-string\">'e'</span>) <span class=\"hljs-comment\">// true</span>\nR_.includes([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'f'</span>], <span class=\"hljs-string\">'a'</span>]) <span class=\"hljs-comment\">// false</span>","name":"includes","params":[{"description":"","name":"list","type":"Array"},{"description":"","name":"item","type":"any"}],"returns":{"description":"Returns `true` if `list` includes `item`.","type":"Boolean"},"see":[],"sigs":["[a] → b → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Type","deprecated":"","description":"<p>Returns true if argument is type of Array.</p>\n","example":"R_.isArray([]) <span class=\"hljs-comment\">// true</span>\nR_.isArray(<span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// false</span>","name":"isArray","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Type","deprecated":"","description":"<p>Returns true if the argument is an instance of Error.</p>\n","example":"R_.isError(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>())\t<span class=\"hljs-comment\">// true</span>\nR_.isError(<span class=\"hljs-literal\">null</span>)\t<span class=\"hljs-comment\">// false</span>","name":"isError","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns <code>true</code> for falsy values. Complement of <code>R_.falsy</code>.</p>\n","example":"R_.isFalsy(<span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// false</span>\nR_.isFalsy({}) <span class=\"hljs-comment\">// false</span>\nR_.isFalsy([]) <span class=\"hljs-comment\">// false</span>\nR_.isFalsy(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// false</span>\nR_.isFalsy(<span class=\"hljs-string\">\"hello\"</span>) <span class=\"hljs-comment\">// false</span>\nR_.isFalsy(<span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// true</span>\nR_.isFalsy(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// true</span>\nR_.isFalsy(<span class=\"hljs-string\">\"\"</span>) <span class=\"hljs-comment\">// true</span>","name":"isFalsy","params":[{"description":"","name":"input","type":"any"}],"returns":{"description":"`true` if `input` is falsy","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Type","deprecated":"","description":"<p>Returns true if argument is type of Function.</p>\n","example":"R_.isFunction(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {})\t<span class=\"hljs-comment\">// true</span>\nR_.isFunction({})\t<span class=\"hljs-comment\">// false</span>\nR_.isFunction([])\t<span class=\"hljs-comment\">// false</span>\nR_.isFunction(<span class=\"hljs-string\">''</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isFunction(<span class=\"hljs-number\">0</span>)\t<span class=\"hljs-comment\">// false</span>","name":"isFunction","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Math","deprecated":"","description":"<p>Returns true if argument is lower than 0.</p>\n","example":"R_.isNegative(<span class=\"hljs-number\">3</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNegative(<span class=\"hljs-number\">0</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNegative(<span class=\"hljs-number\">-3</span>)\t<span class=\"hljs-comment\">// true</span>","name":"isNegative","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["Number → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns true if input is empty or nil.</p>\n","example":"R_.isNilOrEmpty(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// true</span>\nR_.isNilOrEmpty({}) <span class=\"hljs-comment\">// true</span>\nR_.isNilOrEmpty(<span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// false</span>\nR_.isNilOrEmpty(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// false</span>","name":"isNilOrEmpty","params":[{"description":"","name":"input","type":"any"}],"returns":{"description":"","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns true if argument is null, undefined or &#39;&#39;.</p>\n","example":"R_.isNilOrEmptyString(<span class=\"hljs-literal\">null</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isNilOrEmptyString(<span class=\"hljs-literal\">undefined</span>)<span class=\"hljs-comment\">// true</span>\nR_.isNilOrEmptyString(<span class=\"hljs-string\">''</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isNilOrEmptyString(<span class=\"hljs-literal\">false</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNilOrEmptyString(<span class=\"hljs-number\">0</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNilOrEmptyString([])\t<span class=\"hljs-comment\">// false</span>\nR_.isNilOrEmptyString({})\t<span class=\"hljs-comment\">// false</span>","name":"isNilOrEmptyString","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns true if the given value is not its type&#39;s empty value</p>\n","example":"R_.isNotEmpty([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);   <span class=\"hljs-comment\">// true</span>\nR_.isNotEmpty([]);          <span class=\"hljs-comment\">// false</span>\nR_.isNotEmpty(<span class=\"hljs-string\">''</span>);          <span class=\"hljs-comment\">// false</span>\nR_.isNotEmpty(<span class=\"hljs-literal\">null</span>);        <span class=\"hljs-comment\">// true</span>\nR_.isNotEmpty({});          <span class=\"hljs-comment\">// false</span>\nR_.isNotEmpty({<span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">0</span>}); <span class=\"hljs-comment\">// true</span>","name":"isNotEmpty","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Return negation of native isNaN function.</p>\n","example":"R_.isNotNaN(<span class=\"hljs-number\">0</span>)            <span class=\"hljs-comment\">// true</span>\nR_.isNotNaN(<span class=\"hljs-string\">''</span>)           <span class=\"hljs-comment\">// true</span>\nR_.isNotNaN([])           <span class=\"hljs-comment\">// true</span>\nR_.isNotNaN(<span class=\"hljs-literal\">null</span>)         <span class=\"hljs-comment\">// true</span>\nR_.isNotNaN({})           <span class=\"hljs-comment\">// false</span>\nR_.isNotNaN(<span class=\"hljs-literal\">NaN</span>)          <span class=\"hljs-comment\">// false</span>\nR_.isNotNaN(<span class=\"hljs-literal\">undefined</span>)    <span class=\"hljs-comment\">// false</span>","name":"isNotNaN","params":[],"returns":{"description":"","type":""},"see":["http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers"],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns true if argument is neither null or undefined.</p>\n","example":"R_.isNotNil(<span class=\"hljs-literal\">null</span>)\t\t<span class=\"hljs-comment\">// false</span>\nR_.isNotNil(<span class=\"hljs-literal\">undefined</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNotNil(<span class=\"hljs-string\">''</span>)\t\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNil(<span class=\"hljs-literal\">false</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNil(<span class=\"hljs-number\">0</span>)\t\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNil([])\t\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNil({})\t\t<span class=\"hljs-comment\">// true</span>","name":"isNotNil","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns true if argument is not nil object.</p>\n","example":"R_.isNotNilObject({})\t\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNilObject([])\t\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNilObject(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {})\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNilObject(<span class=\"hljs-literal\">null</span>)\t\t<span class=\"hljs-comment\">// false</span>\nR_.isNotNilObject()\t\t<span class=\"hljs-comment\">// false</span>\nR_.isNotNilObject(<span class=\"hljs-number\">1</span>)\t\t<span class=\"hljs-comment\">// false</span>\nR_.isNotNilObject(<span class=\"hljs-string\">\"\"</span>)\t\t<span class=\"hljs-comment\">// false</span>","name":"isNotNilObject","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns true if argument is not finite numeric value.</p>\n","example":"R_.isNotNumeric(<span class=\"hljs-number\">-1</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNotNumeric(<span class=\"hljs-number\">0</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNotNumeric(<span class=\"hljs-number\">1</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNotNumeric(<span class=\"hljs-number\">1.1</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNotNumeric(<span class=\"hljs-literal\">Infinity</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNumeric(<span class=\"hljs-literal\">NaN</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNumeric(<span class=\"hljs-string\">''</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNumeric(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {})\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNumeric(<span class=\"hljs-literal\">false</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNumeric(<span class=\"hljs-literal\">null</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNumeric(<span class=\"hljs-literal\">undefined</span>)<span class=\"hljs-comment\">// true</span>\nR_.isNotNumeric({})\t<span class=\"hljs-comment\">// true</span>\nR_.isNotNumeric([])\t<span class=\"hljs-comment\">// true</span>","name":"isNotNumeric","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Type","deprecated":"","description":"<p>Returns true if argument is not RegExp.</p>\n","example":"R_.isNotRegExp(<span class=\"hljs-regexp\">/foo/</span>) <span class=\"hljs-comment\">// false</span>\nR_.isNotRegExp(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// true</span>","name":"isNotRegExp","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns true if argument is finite numeric value.</p>\n","example":"R_.isNumeric(<span class=\"hljs-number\">-1</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isNumeric(<span class=\"hljs-number\">0</span>)\t\t<span class=\"hljs-comment\">// true</span>\nR_.isNumeric(<span class=\"hljs-number\">1</span>)\t\t<span class=\"hljs-comment\">// true</span>\nR_.isNumeric(<span class=\"hljs-number\">1.1</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isNumeric(<span class=\"hljs-literal\">Infinity</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNumeric(<span class=\"hljs-literal\">NaN</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNumeric(<span class=\"hljs-string\">''</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNumeric(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {})\t<span class=\"hljs-comment\">// false</span>\nR_.isNumeric(<span class=\"hljs-literal\">false</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNumeric(<span class=\"hljs-literal\">null</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNumeric(<span class=\"hljs-literal\">undefined</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isNumeric({})\t<span class=\"hljs-comment\">// false</span>\nR_.isNumeric([])\t<span class=\"hljs-comment\">// false</span>","name":"isNumeric","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Type","deprecated":"","description":"<p>Returns true if argument is type of Object.</p>\n","example":"R_.isObject({}) <span class=\"hljs-comment\">// true</span>\nR_.isObject([]) <span class=\"hljs-comment\">// true</span>\nR_.isObject(<span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// false</span>","name":"isObject","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Math","deprecated":"","description":"<p>Returns true if argument is greater than 0.</p>\n","example":"R_.isPositive(<span class=\"hljs-number\">3</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.isPositive(<span class=\"hljs-number\">0</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.isPositive(<span class=\"hljs-number\">-3</span>)\t<span class=\"hljs-comment\">// false</span>","name":"isPositive","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["Number → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Type","deprecated":"","description":"<p>Returns true if argument is Promise.</p>\n","example":"R_.isPromise(<span class=\"hljs-built_in\">Promise</span>.resolve()) <span class=\"hljs-comment\">// true</span>\nR_.isPromise(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// false</span>","name":"isPromise","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Type","deprecated":"","description":"<p>Returns true if argument is RegExp.</p>\n","example":"R_.isRegExp(<span class=\"hljs-regexp\">/foo/</span>) <span class=\"hljs-comment\">// true</span>\nR_.isRegExp(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// false</span>","name":"isRegExp","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Type","deprecated":"","description":"<p>Returns true if argument is type of String.</p>\n","example":"R_.isString({}) <span class=\"hljs-comment\">// false</span>\nR_.isString([]) <span class=\"hljs-comment\">// false</span>\nR_.isString(<span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// true</span>","name":"isString","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Alias for Boolean constructor. Returns &#39;true&#39; for truthy values.</p>\n","example":"R_.isTruthy(<span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// true</span>\nR_.isTruthy({}) <span class=\"hljs-comment\">// true</span>\nR_.isTruthy([]) <span class=\"hljs-comment\">// true</span>\nR_.isTruthy(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// true</span>\nR_.isTruthy(<span class=\"hljs-string\">\"hello\"</span>) <span class=\"hljs-comment\">// true</span>\nR_.isTruthy(<span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// false</span>\nR_.isTruthy(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// false</span>\nR_.isTruthy(<span class=\"hljs-string\">\"\"</span>) <span class=\"hljs-comment\">// false</span>","name":"isTruthy","params":[{"description":"","name":"input","type":"any"}],"returns":{"description":"`true` if `input` is truthy","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Joins array of string with dash (hyphen) determiner.</p>\n","example":"R_.joinWithDash([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]) <span class=\"hljs-comment\">// 'a-b-c'</span>","name":"joinWithDash","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["[String] → String"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Joins array of string with dot determiner.</p>\n","example":"R_.joinWithDot([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]) <span class=\"hljs-comment\">// 'a.b.c'</span>","name":"joinWithDot","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["[String] → String"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Joins array of string with space determiner.</p>\n","example":"R_.joinWithSpace([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]) <span class=\"hljs-comment\">// 'a b c'</span>","name":"joinWithSpace","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["[String] → String"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Joins array of string with underscore determiner.</p>\n","example":"R_.joinWithUnderscore([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]) <span class=\"hljs-comment\">// 'a_b_c'</span>","name":"joinWithUnderscore","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["[String] → String"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Copies keys of object to appropriate values.</p>\n","example":"<span class=\"hljs-keyword\">const</span> actionTypes = R_.keyMirror({\n<span class=\"hljs-attr\">ITEM_REQUEST</span>: <span class=\"hljs-literal\">null</span>,\n<span class=\"hljs-attr\">ITEM_SUCCESS</span>: <span class=\"hljs-literal\">null</span>,\n<span class=\"hljs-attr\">ITEM_ERROR</span>: <span class=\"hljs-literal\">null</span>,\n});\n\n<span class=\"hljs-keyword\">const</span> action = { <span class=\"hljs-attr\">type</span>: actionTypes.ITEM_REQUEST };\n\naction.type === actionTypes.ITEM_REQUEST <span class=\"hljs-comment\">// true</span>","name":"keyMirror","params":[{"description":"<p>where should be keys copied as values.</p>\n","name":"Object","type":"Object"}],"returns":{"description":"","type":"Object"},"see":[],"sigs":["Object → Object"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Takes first argument from the arguments</p>\n","example":"R_.lastArg(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>) <span class=\"hljs-comment\">// c</span>","name":"lastArg","params":[],"returns":{"description":"","type":""},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Converts list of strings to string.</p>\n","example":"R_.listToString([<span class=\"hljs-string\">'h'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'l'</span>, <span class=\"hljs-string\">'o'</span>]) <span class=\"hljs-comment\">// 'hello'</span>","name":"listToString","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["[String] → String"],"since":"","typedefns":[]},{"aka":[],"category":"Debugging","deprecated":"","description":"<p>Function with side-effect. Logs input to console and returns that input. Should be used only in development.</p>\n","example":"R_.log(<span class=\"hljs-string\">'hello'</span>) <span class=\"hljs-comment\">// logs 'hello'</span>\ncompose(R_.log, R.sum)([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>]) <span class=\"hljs-comment\">// logs 4</span>","name":"log","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → a"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns true if length of array is bigger or equals than first argument</p>\n","example":"<span class=\"hljs-keyword\">const</span> lengthBiggerThanEqualsOne = R_.lteThanLength(<span class=\"hljs-number\">1</span>)\nlengthBiggerThanEqualsOne([{},{}])\t<span class=\"hljs-comment\">// true</span>\nlengthBiggerThanEqualsOne([{}])\t\t<span class=\"hljs-comment\">// true</span>\nlengthBiggerThanEqualsOne([])\t\t<span class=\"hljs-comment\">// false</span>","name":"lteThanLength","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["Number → [a] → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns true if length of array is bigger than first argument</p>\n","example":"<span class=\"hljs-keyword\">const</span> lengthBiggerThanZero = R_.ltThanLength(<span class=\"hljs-number\">0</span>)\nlengthBiggerThanZero([{}])\t<span class=\"hljs-comment\">// true</span>\nlengthBiggerThanZero([])\t<span class=\"hljs-comment\">// false</span>","name":"ltThanLength","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["Number → [a] → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Map using function that is provided with each value of the list and its index in the list.</p>\n","example":"R_.mapIndexed(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, index</span>) =&gt;</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${value}</span>-<span class=\"hljs-subst\">${index}</span>`</span>)([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\n<span class=\"hljs-comment\">// ['1-0', '2-1', '3-2']</span>","name":"mapIndexed","params":[{"description":"<p>The function to be called on every element of the <code>list</code> and its index.</p>\n","name":"fn","type":"function"},{"description":"<p>The list to be iterated over.</p>\n","name":"list","type":"Array"}],"returns":{"description":"The new list.","type":"Array"},"see":[],"sigs":["(a → Number → a) → [a] → a"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Use map function over the keys of the given object</p>\n","example":"R_.mapKeys(R_.toUpperFirst, {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">z</span>: <span class=\"hljs-number\">3</span>}); <span class=\"hljs-comment\">//=&gt; {X: 2, Y: 4, Z: 6}</span>","name":"mapKeys","params":[{"description":"<p>The function to be called on every key of the input object.</p>\n","name":"fn","type":"function"},{"description":"<p>The object to be iterated over.</p>\n","name":"obj","type":"Array"}],"returns":{"description":"The new object with mapped keys.","type":"Array"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Always returns null.</p>\n","example":"R_.mapKeysAndValues(<span class=\"hljs-function\">(<span class=\"hljs-params\">[a, b]</span>) =&gt;</span> [b, a], { <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">\"bar\"</span>, <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-string\">\"boo\"</span> })\n<span class=\"hljs-comment\">// { bar: \"foo\", boo: \"baz\" }</span>","name":"mapKeysAndValues","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["([a] → [b]) → Object → Object"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Map object keys. Mapping functions have both key and value as arguments.</p>\n","example":"R_.mapKeysWithValue(<span class=\"hljs-function\">(<span class=\"hljs-params\">key, value</span>) =&gt;</span> value)({ <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">\"bar\"</span> }) <span class=\"hljs-comment\">// { bar: \"bar\" }</span>","name":"mapKeysWithValue","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["((String, a) → b) → Object → Object"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Creates a new function that, when invoked, caches the result of calling <code>fn</code>\nfor a given argument and returns the result. Subsequent calls to the\nmemoized <code>fn</code> with the same argument will not result in an additional\ncall to <code>fn</code>; instead, the cached result for that argument will be returned</p>\n","example":"<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">const</span> factorial = R_.memoizeWithIdentity(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> {\ncount += <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">return</span> R.product(R.range(<span class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>));\n});\nfactorial(<span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// 120</span>\nfactorial(<span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// 120</span>\nfactorial(<span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// 120</span>\ncount; <span class=\"hljs-comment\">// 1</span>","name":"memoizeWithIdentity","params":[],"returns":{"description":"","type":""},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Creates a new object with the own properties of the list of provided objects.\nList of objects is reduced from first object to the last.\nIf a key exists in both compared objects:</p>\n<ul>\n<li>and both associated values are also objects then the values will be\nrecursively merged.</li>\n<li>otherwise the provided function is applied to associated values using the\nresulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key\nof the resulting object.</li>\n</ul>\n","example":"R_.mergeDeepAllWith(R.concat, [\n{ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: [<span class=\"hljs-number\">1</span>] } },\n{ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: [<span class=\"hljs-number\">2</span>] } },\n{ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: [<span class=\"hljs-number\">3</span>] } },\n])\n<span class=\"hljs-comment\">// { a: { b: [1, 2, 3] } }</span>","name":"mergeDeepAllWith","params":[{"description":"<p>Function that resolves merging between two same keys</p>\n","name":"reducer","type":"function"},{"description":"<p>Array of objects to be merged with</p>\n","name":"objects","type":"Array"}],"returns":{"description":"Returns merged object","type":"Object"},"see":["mergeDeepLeftAll","mergeDeepRightAll","mergeDeepAllWithKey"],"sigs":["((a, a) → a) → [{a}] → {a}"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Creates a new object with the own properties of the list of provided objects.\nList of objects is reduced from first object to the last.\nIf a key exists in both compared objects:</p>\n<ul>\n<li>and both associated values are also objects then the values will be\nrecursively merged.</li>\n<li>otherwise the provided function is applied to the key and associated values\nusing the resulting value as the new value associated with the key.\nIf a key only exists in one object, the value will be associated with the key of the resulting object.</li>\n</ul>\n","example":"R_.mergeDeepAllWith(<span class=\"hljs-function\">(<span class=\"hljs-params\">key, l, r</span>) =&gt;</span> key === <span class=\"hljs-string\">\"b\"</span> ? R.concat(l, r) : r, [\n{ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: [<span class=\"hljs-number\">1</span>], <span class=\"hljs-attr\">c</span>: [<span class=\"hljs-number\">1</span>] } },\n{ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: [<span class=\"hljs-number\">2</span>], <span class=\"hljs-attr\">c</span>: [<span class=\"hljs-number\">2</span>] } },\n{ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: [<span class=\"hljs-number\">3</span>], <span class=\"hljs-attr\">c</span>: [<span class=\"hljs-number\">3</span>] } },\n])\n<span class=\"hljs-comment\">// { a: { b: [1, 2, 3], c: [3] } }</span>","name":"mergeDeepAllWithKey","params":[{"description":"<p>Function that resolves merging between two same keys</p>\n","name":"reducer","type":"function"},{"description":"<p>Array of objects to be merged with</p>\n","name":"objects","type":"Array"}],"returns":{"description":"Returns merged object","type":"Object"},"see":["mergeDeepLeftAll","mergeDeepRightAll","mergeDeepAllWith"],"sigs":["((String, a, a) → a) → [{a}] → {a}"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Returns deeply merged object by merging all objects in a passed list. Merging is applied from the left.\nSee mergeDeepLeft from Ramda.</p>\n","example":"<span class=\"hljs-keyword\">const</span> a = { <span class=\"hljs-attr\">fooA</span>: { <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">'a'</span> }, <span class=\"hljs-attr\">shared</span>: { <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">1</span> } };\n<span class=\"hljs-keyword\">const</span> b = { <span class=\"hljs-attr\">fooB</span>: { <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">'b'</span> }, <span class=\"hljs-attr\">shared</span>: { <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">2</span> } };\n<span class=\"hljs-keyword\">const</span> c = { <span class=\"hljs-attr\">fooC</span>: { <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">'c'</span> }, <span class=\"hljs-attr\">shared</span>: { <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">3</span> } };\n\nR_.mergeDeepLeftAll([a, b, c])\n<span class=\"hljs-comment\">// {</span>\n<span class=\"hljs-comment\">// \tfooA: { bar: 'a' },</span>\n<span class=\"hljs-comment\">// \tfooB: { bar: 'b' },</span>\n<span class=\"hljs-comment\">// \tfooC: { bar: 'c' },</span>\n<span class=\"hljs-comment\">// \tshared: { baz: 1 },</span>\n<span class=\"hljs-comment\">// }</span>","name":"mergeDeepLeftAll","params":[{"description":"<p>Array of objects</p>\n","name":"list","type":"array"}],"returns":{"description":"Merged object","type":"object"},"see":["mergeDeepLeftAll","mergeDeepAllWith","mergeDeepAllWithKey"],"sigs":["[{a}] → {a}"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Returns deeply merged object by merging all objects in a passed list. Merging is applied from the right.\nSee mergeDeepRight from Ramda.</p>\n","example":"<span class=\"hljs-keyword\">const</span> a = { <span class=\"hljs-attr\">fooA</span>: { <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">'a'</span> }, <span class=\"hljs-attr\">shared</span>: { <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">1</span> } };\n<span class=\"hljs-keyword\">const</span> b = { <span class=\"hljs-attr\">fooB</span>: { <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">'b'</span> }, <span class=\"hljs-attr\">shared</span>: { <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">2</span> } };\n<span class=\"hljs-keyword\">const</span> c = { <span class=\"hljs-attr\">fooC</span>: { <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">'c'</span> }, <span class=\"hljs-attr\">shared</span>: { <span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">3</span> } };\n\nR_.mergeDeepRightAll([a, b, c])\n<span class=\"hljs-comment\">// {</span>\n<span class=\"hljs-comment\">// \tfooA: { bar: 'a' },</span>\n<span class=\"hljs-comment\">// \tfooB: { bar: 'b' },</span>\n<span class=\"hljs-comment\">// \tfooC: { bar: 'c' },</span>\n<span class=\"hljs-comment\">// \tshared: { baz: 3 },</span>\n<span class=\"hljs-comment\">// }</span>","name":"mergeDeepRightAll","params":[{"description":"<p>Array of objects</p>\n","name":"list","type":"array"}],"returns":{"description":"Merged object","type":"object"},"see":["mergeDeepLeftAll","mergeDeepAllWith","mergeDeepAllWithKey"],"sigs":["[{a}] → {a}"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Alias for <code>alwaysNull</code></p>\n","example":"R_.noop() <span class=\"hljs-comment\">// null</span>","name":"noop","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → Object"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":true,"description":"<p>Alias for <code>isNotEmpty</code></p>\n","example":"R_.notEmpty([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);   <span class=\"hljs-comment\">// true</span>\nR_.notEmpty([]);          <span class=\"hljs-comment\">// false</span>\nR_.notEmpty(<span class=\"hljs-string\">''</span>);          <span class=\"hljs-comment\">// false</span>\nR_.notEmpty(<span class=\"hljs-literal\">null</span>);        <span class=\"hljs-comment\">// true</span>\nR_.notEmpty({});          <span class=\"hljs-comment\">// false</span>\nR_.notEmpty({<span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">0</span>}); <span class=\"hljs-comment\">// true</span>","name":"notEmpty","params":[],"returns":{"description":"","type":""},"see":["isNotEmpty"],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"","description":"<p>Returns true if the arguments are not equal</p>\n","example":"R_.notEqual(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);   <span class=\"hljs-comment\">// true</span>\nR_.notEqual(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">// false</span>","name":"notEqual","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → b → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if value is not equal to empty array.</p>\n","example":"R_.notEqualToEmptyArray([]);   <span class=\"hljs-comment\">// false</span>\nR_.notEqualToEmptyArray([{ <span class=\"hljs-attr\">ramda</span>: <span class=\"hljs-literal\">true</span> }]);   <span class=\"hljs-comment\">// true</span>","name":"notEqualToEmptyArray","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"Returns `true` if `value` is not an empty array.","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if value is not equal to empty object.</p>\n","example":"R_.notEqualToEmptyObject({});   <span class=\"hljs-comment\">// false</span>\nR_.notEqualToEmptyObject({ <span class=\"hljs-attr\">ramda</span>: <span class=\"hljs-literal\">true</span> });   <span class=\"hljs-comment\">// true</span>","name":"notEqualToEmptyObject","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"Returns `true` if `value` is not an empty object.","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if value is not equal to empty string.</p>\n","example":"R_.notEqualToEmptyString(<span class=\"hljs-string\">\"\"</span>);   <span class=\"hljs-comment\">// false</span>\nR_.notEqualToEmptyString(<span class=\"hljs-string\">\"Ramda\"</span>);   <span class=\"hljs-comment\">// true</span>","name":"notEqualToEmptyString","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"Returns `true` if `value` is not an empty string.","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if value is not equal to false.</p>\n","example":"R_.notEqualToFalse(<span class=\"hljs-literal\">false</span>);   <span class=\"hljs-comment\">// false</span>\nR_.notEqualToFalse(<span class=\"hljs-literal\">true</span>);   <span class=\"hljs-comment\">// true</span>","name":"notEqualToFalse","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"Returns `true` if `value` is not false.","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if value is not equal to null.</p>\n","example":"R_.notEqualToNull(<span class=\"hljs-literal\">null</span>);   <span class=\"hljs-comment\">// false</span>\nR_.notEqualToNull(<span class=\"hljs-literal\">false</span>);   <span class=\"hljs-comment\">// true</span>","name":"notEqualToNull","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"Returns `true` if `value` is not null.","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if value is not equal to number one.</p>\n","example":"R_.notEqualToOne(<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">// false</span>\nR_.notEqualToOne(<span class=\"hljs-number\">0</span>);   <span class=\"hljs-comment\">// true</span>","name":"notEqualToOne","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"Returns `true` if `value` is not number one.","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if value is not equal to true.</p>\n","example":"R_.notEqualToTrue(<span class=\"hljs-literal\">true</span>);   <span class=\"hljs-comment\">// false</span>\nR_.notEqualToTrue(<span class=\"hljs-literal\">false</span>);   <span class=\"hljs-comment\">// true</span>","name":"notEqualToTrue","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"Returns `true` if `value` is not true.","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if value is not equal to zero.</p>\n","example":"R_.notEqualToZero(<span class=\"hljs-number\">0</span>);   <span class=\"hljs-comment\">// false</span>\nR_.notEqualToZero(<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">// true</span>","name":"notEqualToZero","params":[{"description":"","name":"value","type":"any"}],"returns":{"description":"Returns `true` if `value` is not zero.","type":"Boolean"},"see":[],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns <code>false</code> if any of the items from <code>list</code> includes <code>item</code>.</p>\n","example":"R_.notInclude([<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>], <span class=\"hljs-string\">'e'</span>) <span class=\"hljs-comment\">// false</span>\nR_.notInclude([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'f'</span>], <span class=\"hljs-string\">'a'</span>]) <span class=\"hljs-comment\">// true</span>","name":"notInclude","params":[{"description":"","name":"list","type":"Array"},{"description":"","name":"item","type":"any"}],"returns":{"description":"Returns `false` if `list` includes `item`.","type":"Boolean"},"see":[],"sigs":["[a] → b → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":"[description]","description":"<p>Alias for <code>isNotNaN</code>.</p>\n","example":"R_.notNaN(<span class=\"hljs-number\">0</span>)            <span class=\"hljs-comment\">// true</span>\nR_.notNaN(<span class=\"hljs-string\">''</span>)           <span class=\"hljs-comment\">// true</span>\nR_.notNaN([])           <span class=\"hljs-comment\">// true</span>\nR_.notNaN(<span class=\"hljs-literal\">null</span>)         <span class=\"hljs-comment\">// true</span>\nR_.notNaN({})           <span class=\"hljs-comment\">// false</span>\nR_.notNaN(<span class=\"hljs-literal\">NaN</span>)          <span class=\"hljs-comment\">// false</span>\nR_.notNaN(<span class=\"hljs-literal\">undefined</span>)    <span class=\"hljs-comment\">// false</span>","name":"notNaN","params":[],"returns":{"description":"","type":""},"see":["isNotNaN"],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":true,"description":"<p>Alias for <code>isNotNil</code></p>\n","example":"R_.notNil(<span class=\"hljs-literal\">null</span>)\t\t<span class=\"hljs-comment\">// false</span>\nR_.notNil(<span class=\"hljs-literal\">undefined</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.notNil(<span class=\"hljs-string\">''</span>)\t\t<span class=\"hljs-comment\">// true</span>\nR_.notNil(<span class=\"hljs-literal\">false</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.notNil(<span class=\"hljs-number\">0</span>)\t\t<span class=\"hljs-comment\">// true</span>\nR_.notNil([])\t\t<span class=\"hljs-comment\">// true</span>\nR_.notNil({})\t\t<span class=\"hljs-comment\">// true</span>","name":"notNil","params":[],"returns":{"description":"","type":""},"see":["isNotNil"],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Logic","deprecated":true,"description":"<p>Alias for <code>isNotNumeric</code>.</p>\n","example":"R_.notNumeric(<span class=\"hljs-number\">-1</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.notNumeric(<span class=\"hljs-number\">0</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.notNumeric(<span class=\"hljs-number\">1</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.notNumeric(<span class=\"hljs-number\">1.1</span>)\t<span class=\"hljs-comment\">// false</span>\nR_.notNumeric(<span class=\"hljs-literal\">Infinity</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.notNumeric(<span class=\"hljs-literal\">NaN</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.notNumeric(<span class=\"hljs-string\">''</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.notNumeric(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {})\t<span class=\"hljs-comment\">// true</span>\nR_.notNumeric(<span class=\"hljs-literal\">false</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.notNumeric(<span class=\"hljs-literal\">null</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.notNumeric(<span class=\"hljs-literal\">undefined</span>)<span class=\"hljs-comment\">// true</span>\nR_.notNumeric({})\t<span class=\"hljs-comment\">// true</span>\nR_.notNumeric([])\t<span class=\"hljs-comment\">// true</span>","name":"notNumeric","params":[],"returns":{"description":"","type":""},"see":["isNotNumeric"],"sigs":["a → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Firstly applies transformation on input data structure according to provided &quot;lens&quot;.\nReturning value is made by the &quot;setting&quot; the portion\nof the result focused by the given <code>lens</code>.</p>\n","example":"R_.objOfOver(\nR.lensPath([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>]),\n(x) =&gt; <span class=\"hljs-string\">\"Hello \"</span> + x,\n{\n<span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">'foo'</span> },\n<span class=\"hljs-attr\">c</span>: <span class=\"hljs-string\">'bar'</span>,\n}\n)\n<span class=\"hljs-comment\">// { a: { b: \"Hello foo\" } }</span>","name":"objOfOver","params":[{"description":"<p>Lens</p>\n","name":"lens","type":"Object"},{"description":"<p>Transformation function</p>\n","name":"tranformation","type":"function"},{"description":"","name":"input","type":"any"}],"returns":{"description":"Firstly applies transformation on `input` according to `lens` (`R.over`)\nand than returning value is made by the \"setting\" (`R.set`) the portion\nof previous result focused by the given `lens`.","type":"Object"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Returns an over lens to the first index of list.</p>\n","example":"R_.overHead(R.toUpper, [<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-string\">'bar'</span>, <span class=\"hljs-string\">'baz'</span>]); <span class=\"hljs-comment\">//=&gt; ['FOO', 'bar', 'baz']</span>","name":"overHead","params":[{"description":"","name":"v","type":"*"},{"description":"","name":"x","type":"*"}],"returns":{"description":"","type":"*"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Length of the output string, <code>padString</code> and initial value.\n<code>padString</code> is repeatedly concated to <code>init</code> until the length of the string is equal to <code>lengthString</code>.</p>\n","example":"R_.padLeft(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">'0'</span>)(<span class=\"hljs-string\">'1'</span>) <span class=\"hljs-comment\">// '00000000001'</span>\nR_.padLeft(<span class=\"hljs-number\">-9</span>, <span class=\"hljs-string\">'0'</span>)(<span class=\"hljs-string\">'1'</span>) <span class=\"hljs-comment\">// '1'</span>\nR_.padLeft(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'0'</span>)(<span class=\"hljs-string\">'1'</span>) <span class=\"hljs-comment\">// '1'</span>","name":"padLeft","params":[{"description":"<p>Length of the output string.</p>\n","name":"lengthString","type":"number"},{"description":"","name":"padString","type":"string"},{"description":"<p>Intitial value</p>\n","name":"init","type":"string"}],"returns":{"description":"String","type":""},"see":["padRight","padLeftUntil","padRightUntil"],"sigs":["Number → a → a"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Takes a predicate, string <code>padString</code> and initial value. <code>padString</code> is contacted to the output string\neverytime <code>pred</code> returns falsy value.</p>\n","example":"R_.padLeftUntil(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x.length === <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">'0'</span>)(<span class=\"hljs-string\">'1'</span>) <span class=\"hljs-comment\">// '0000000001'</span>","name":"padLeftUntil","params":[{"description":"<p>Called after every contactation of <code>padString</code></p>\n","name":"pred","type":"fn"},{"description":"<p>String that is added everytime the <code>pred</code> returns falsy value</p>\n","name":"padString","type":"string"},{"description":"<p>Intitial value</p>\n","name":"init","type":"string"}],"returns":{"description":"String","type":""},"see":["padLeft","padRight","padRightUntil"],"sigs":["(a → Boolean) → a → a"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Length of the output string, <code>padString</code> and initial value.\n<code>padString</code> is repeatedly appended to the <code>init</code> until the length of the string is equal to <code>lengthString</code>.</p>\n","example":"R_.padRight(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">'0'</span>)(<span class=\"hljs-string\">'1'</span>) <span class=\"hljs-comment\">// '10000000000'</span>\nR_.padRight(<span class=\"hljs-number\">-9</span>, <span class=\"hljs-string\">'0'</span>)(<span class=\"hljs-string\">'1'</span>) <span class=\"hljs-comment\">// '1'</span>\nR_.padRight(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'0'</span>)(<span class=\"hljs-string\">'1'</span>) <span class=\"hljs-comment\">// '1'</span>","name":"padRight","params":[{"description":"<p>Length of the output string.</p>\n","name":"lengthString","type":"number"},{"description":"","name":"padString","type":"string"},{"description":"<p>Intitial value</p>\n","name":"init","type":"string"}],"returns":{"description":"String","type":""},"see":["padLeft","padRightUntil","padRightUntil"],"sigs":["Number → a → a"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Takes a predicate, string <code>padString</code> and initial value. <code>padString</code> is append to the output string\neverytime <code>pred</code> returns falsy value.</p>\n","example":"R_.padRightUntil(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x.length === <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">'0'</span>)(<span class=\"hljs-string\">'1'</span>) <span class=\"hljs-comment\">// '1000000000'</span>","name":"padRightUntil","params":[{"description":"<p>Called after every append of <code>padString</code>.</p>\n","name":"pred","type":"fn"},{"description":"<p>String that is added everytime the <code>pred</code> returns falsy value</p>\n","name":"padString","type":"string"},{"description":"<p>Intitial value</p>\n","name":"init","type":"string"}],"returns":{"description":"String","type":""},"see":["padLeft","padRight","padLeftUntil"],"sigs":["(a → Boolean) → a → a"],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if nested path of object literal does not contains given value.</p>\n","example":"R_.pathNotEq([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> } })\t<span class=\"hljs-comment\">// false</span>\nR_.pathNotEq([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> } })\t<span class=\"hljs-comment\">// true</span>\nR_.pathNotEq([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], <span class=\"hljs-number\">1</span>, {}) \t\t<span class=\"hljs-comment\">// true</span>\nR_.pathNotEq([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">a</span>: {} }) \t\t<span class=\"hljs-comment\">// true</span>","name":"pathNotEq","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["[String | Int] → a → {a} → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Returns <code>true</code> if the specified object property at given path not satisfies the given predicate; false otherwise.</p>\n","example":"<span class=\"hljs-keyword\">const</span> positive = <span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x &gt; <span class=\"hljs-number\">0</span>;\n\nR_.pathNotSatisfies(positive, [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], { }); <span class=\"hljs-comment\">// true</span>\nR_.pathNotSatisfies(positive, [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">-1</span> } }); <span class=\"hljs-comment\">// true</span>\nR_.pathNotSatisfies(positive, [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span> } }); <span class=\"hljs-comment\">// false</span>","name":"pathNotSatisfies","params":[{"description":"","name":"predicate","type":"function"},{"description":"<p>The path to use.</p>\n","name":"path","type":"String"},{"description":"","name":"obj","type":"Object"}],"returns":{"description":"","type":"Boolean"},"see":[],"sigs":["(a → Boolean) → String → {a} → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Creates curried pipe. The leftmost function determines the arity of curry.</p>\n","example":"<span class=\"hljs-keyword\">const</span> appendAndRejectNil = R_.pipeC(R.append, R.rejectNil);\n<span class=\"hljs-keyword\">const</span> appendCAndRejectNil = appendAndRejectNil(<span class=\"hljs-string\">'c'</span>);\nappendCAndRejectNil([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>]) <span class=\"hljs-comment\">// ['a', 'c'];</span>","name":"pipeC","params":[],"returns":{"description":"","type":""},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"Relation","deprecated":"","description":"<p>Returns true if property of object literal does not equals the given value.</p>\n","example":"R_.propNotEq(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> })\t<span class=\"hljs-comment\">// false</span>\nR_.propNotEq(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span> })\t<span class=\"hljs-comment\">// true</span>\nR_.propNotEq(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">1</span>, {})\t<span class=\"hljs-comment\">// true</span>","name":"propNotEq","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → a → Object → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Returns <code>true</code> if the specified object property at given prop not satisfies the given predicate; false otherwise.</p>\n","example":"<span class=\"hljs-keyword\">const</span> positive = <span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x &gt; <span class=\"hljs-number\">0</span>;\n\nR_.propNotSatisfies(positive, <span class=\"hljs-string\">'a'</span>, { }); <span class=\"hljs-comment\">// true</span>\nR_.propNotSatisfies(positive, <span class=\"hljs-string\">'a'</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">-1</span> }); <span class=\"hljs-comment\">// true</span>\nR_.propNotSatisfies(positive, <span class=\"hljs-string\">'a'</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// false</span>","name":"propNotSatisfies","params":[{"description":"","name":"predicate","type":"function"},{"description":"<p>The prop to use.</p>\n","name":"prop","type":"String"},{"description":"","name":"obj","type":"Object"}],"returns":{"description":"","type":"Boolean"},"see":[],"sigs":["(a → Boolean) → String → {a} → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Call function passed as first argument with arguments determined by second parameter in order.</p>\n","example":"<span class=\"hljs-keyword\">const</span> f = <span class=\"hljs-function\">(<span class=\"hljs-params\">a</span>) =&gt;</span> (b) =&gt; a + b\n\nR_.reduceCallable(f, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]) <span class=\"hljs-comment\">// 3</span>","name":"reduceCallable","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["(a → … → b) → [a, …, b] → c"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Extends the reduce functionality by adding the original accumulator value\nas a third argument and the original list as a fourth argument to the\niterator function.</p>\n","example":"R_.reduceSource(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, v, sAcc</span>) =&gt;</span> v + acc + sAcc, <span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// 10</span>\nR_.reduceSource(R.pipe(R.unapply(R.flatten), R.sum), <span class=\"hljs-number\">0</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// 9</span>","name":"reduceSource","params":[{"description":"<p>The iterator function. Receives four arguments, the\n       accumulator, the current element, the source accumulator and the\n       source list.</p>\n","name":"fn","type":"function"},{"description":"<p>The initial accumulator value and value passed as the source\n       accumulator value in the iterator function.</p>\n","name":"acc","type":"*"},{"description":"<p>The list to iterator over and value passed as the source\n       list in the iterator function.</p>\n","name":"list","type":"Array"}],"returns":{"description":"The reduced result.","type":"*"},"see":[],"sigs":["((a, b, a, [b]) → a) → a → [b] → a"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Filters out every value in a list that equals to first argument.</p>\n","example":"R_.rejectEq(<span class=\"hljs-string\">'foo'</span>, [<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-string\">'bar'</span>, <span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-string\">'bar'</span>]); <span class=\"hljs-comment\">// ['bar', 'bar']</span>","name":"rejectEq","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → [b] → [c]"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Filters out every nil value in a list.</p>\n","example":"R_.rejectNil([<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">''</span>]); <span class=\"hljs-comment\">// ['']</span>","name":"rejectNil","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["[a] → [a]"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Creates list of length <code>n</code>. Every item in list equals to <code>input</code> parameter.</p>\n","example":"R_.replicate(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// [6]</span>\nR_.replicate(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// [6, 6]</span>\nR_.replicate(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// [6, 6, 6]</span>","name":"replicate","params":[{"description":"<p>How many times replicate <code>input</code></p>\n","name":"n","type":"Number"},{"description":"<p>Value for replication</p>\n","name":"input","type":"a"}],"returns":{"description":"List List of length `n`. Every item in list equals to `input` parameter","type":""},"see":[],"sigs":["Number → a → [a]"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Merge data in object using custom merge fn.</p>\n","example":"R_.mergeWithDotPath(<span class=\"hljs-string\">'a.b'</span>, R.merge, { <span class=\"hljs-attr\">d</span>: <span class=\"hljs-number\">30</span> }, {<span class=\"hljs-attr\">a</span>: {<span class=\"hljs-attr\">b</span>: { <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">20</span> }}}); <span class=\"hljs-comment\">//=&gt; {a: {b: { c: 20, d: 30 }}}</span>","name":"resolveDotPath","params":[{"description":"<p>The dot path to the value</p>\n","name":"path","type":"String"},{"description":"<p>The merging function</p>\n","name":"mergeFn","type":"function"},{"description":"<p>Value to merge</p>\n","name":"value","type":"*"},{"description":"<p>The object to clone</p>\n","name":"obj","type":"Object"}],"returns":{"description":"A new object with merge data","type":"Object"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Splits string by dot into list.</p>\n","example":"R_.splitByDot(<span class=\"hljs-string\">'a.b.c'</span>) <span class=\"hljs-comment\">// ['a', 'b', 'c']</span>","name":"splitByDot","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → [String]"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Splits string into list. Delimiter is every sequence of non-alphanumerical values.</p>\n","example":"R_.splitByNonAlphaNumeric(<span class=\"hljs-string\">'Hello    world/1'</span>); <span class=\"hljs-comment\">// ['Hello', 'world', '1']</span>","name":"splitByNonAlphaNumeric","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → [String]"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Testing string if starts with some prefix.</p>\n","example":"R_.startsWithPrefix(<span class=\"hljs-string\">'h'</span>, <span class=\"hljs-string\">'hello'</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.startsWithPrefix(<span class=\"hljs-string\">'hell'</span>, <span class=\"hljs-string\">'hello'</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.startsWithPrefix(<span class=\"hljs-string\">'h'</span>, <span class=\"hljs-string\">'good bye'</span>)\t<span class=\"hljs-comment\">// false</span>","name":"startsWithPrefix","params":[{"description":"","name":"prefix","type":"string"},{"description":"","name":"x","type":"string"}],"returns":{"description":"True if `x` starts with `prefix`","type":"boolean"},"see":[],"sigs":["a → b → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Testing string if starts with some prefix ignoring case.</p>\n","example":"R_.startsWithPrefixIgnoreCase(<span class=\"hljs-string\">'h'</span>, <span class=\"hljs-string\">'HELLO'</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.startsWithPrefixIgnoreCase(<span class=\"hljs-string\">'HELL'</span>, <span class=\"hljs-string\">'hello'</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.startsWithPrefixIgnoreCase(<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'hello'</span>)\t<span class=\"hljs-comment\">// true</span>\nR_.startsWithPrefixIgnoreCase(<span class=\"hljs-string\">'h'</span>, <span class=\"hljs-string\">'good bye'</span>)\t<span class=\"hljs-comment\">// false</span>","name":"startsWithPrefixIgnoreCase","params":[{"description":"","name":"prefix","type":"string"},{"description":"","name":"x","type":"string"}],"returns":{"description":"True if `x` starts with `prefix` ignore case","type":"boolean"},"see":[],"sigs":["a → b → Boolean"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Converts string into camelCase.</p>\n","example":"R_.toCamelCase(<span class=\"hljs-string\">'hello-world'</span>)\t\t<span class=\"hljs-comment\">// 'helloWorld'</span>\nR_.toCamelCase(<span class=\"hljs-string\">'hello- world'</span>)\t\t<span class=\"hljs-comment\">// 'helloWorld'</span>\nR_.toCamelCase(<span class=\"hljs-string\">'  hello-/ world/ '</span>)\t<span class=\"hljs-comment\">// 'helloWorld'</span>","name":"toCamelCase","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → String"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Converts string into dot.case.</p>\n","example":"R_.toDotCase(<span class=\"hljs-string\">'hello-world'</span>)\t\t<span class=\"hljs-comment\">// 'hello.world'</span>\nR_.toDotCase(<span class=\"hljs-string\">'hello/*? world'</span>)\t\t<span class=\"hljs-comment\">// 'hello.world'</span>\nR_.toDotCase(<span class=\"hljs-string\">'  hello -/ world/ '</span>)\t<span class=\"hljs-comment\">// 'hello.world'</span>","name":"toDotCase","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → String"],"since":"","typedefns":[]},{"aka":[],"category":"Function","deprecated":"","description":"<p>Returns the opposite value comparing against a given set of two values.</p>\n","example":"R_.toggle(<span class=\"hljs-string\">'on'</span>, <span class=\"hljs-string\">'off'</span>)(<span class=\"hljs-string\">'on'</span>); <span class=\"hljs-comment\">//  'off'</span>\nR_.toggle(<span class=\"hljs-string\">'active'</span>, <span class=\"hljs-string\">'inactive'</span>)(<span class=\"hljs-string\">'inactive'</span>); <span class=\"hljs-comment\">// 'active'</span>\nR_.toggle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>)(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 100</span>\nR_.toggle(<span class=\"hljs-string\">'on'</span>, <span class=\"hljs-string\">'off'</span>)(<span class=\"hljs-string\">'other'</span>); <span class=\"hljs-comment\">// 'other'</span>","name":"toggle","params":[{"description":"<p>must be array of two items</p>\n","name":"options","type":"Array"},{"description":"","name":"val","type":"*"}],"returns":{"description":"opposite of options","type":"*"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Converts string into kebab-case.</p>\n","example":"R_.toKebabCase(<span class=\"hljs-string\">'hello-world'</span>)\t\t<span class=\"hljs-comment\">// 'hello-world'</span>\nR_.toKebabCase(<span class=\"hljs-string\">'hello- world'</span>)\t\t<span class=\"hljs-comment\">// 'hello-world'</span>\nR_.toKebabCase(<span class=\"hljs-string\">'  hello-/ world/ '</span>)\t<span class=\"hljs-comment\">// 'hello-world'</span>","name":"toKebabCase","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → String"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Decapitalize first letter.</p>\n","example":"R_.toLowerFirst(<span class=\"hljs-string\">'HELLO WORLD'</span>) <span class=\"hljs-comment\">// 'hELLO WORLD'</span>","name":"toLowerFirst","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → String"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Converts string into PascalCase.</p>\n","example":"R_.toPascalCase(<span class=\"hljs-string\">'hello-world'</span>)\t\t<span class=\"hljs-comment\">// 'HelloWorld'</span>\nR_.toPascalCase(<span class=\"hljs-string\">'hello- world'</span>)\t\t<span class=\"hljs-comment\">// 'HelloWorld'</span>\nR_.toPascalCase(<span class=\"hljs-string\">'  hello-/ world/ '</span>)\t<span class=\"hljs-comment\">// 'HelloWorld'</span>","name":"toPascalCase","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → String"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Converts string into SCREAMING_SNAKE_CASE.</p>\n","example":"R_.toScreamingSnakeCase(<span class=\"hljs-string\">'hello-world'</span>)\t\t<span class=\"hljs-comment\">// 'HELLO_WORLD'</span>\nR_.toScreamingSnakeCase(<span class=\"hljs-string\">'hello- world'</span>)\t\t<span class=\"hljs-comment\">// 'HELLO_WORLD'</span>\nR_.toScreamingSnakeCase(<span class=\"hljs-string\">'  hello-/ world/ '</span>)\t<span class=\"hljs-comment\">// 'HELLO_WORLD'</span>","name":"toScreamingSnakeCase","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → String"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Converts string into snake_case.</p>\n","example":"R_.toSnakeCase(<span class=\"hljs-string\">'hello-world'</span>)\t\t<span class=\"hljs-comment\">// 'hello_world'</span>\nR_.toSnakeCase(<span class=\"hljs-string\">'hello- world'</span>)\t\t<span class=\"hljs-comment\">// 'hello_world'</span>\nR_.toSnakeCase(<span class=\"hljs-string\">'  hello-/ world/ '</span>)\t<span class=\"hljs-comment\">// 'hello_world'</span>","name":"toSnakeCase","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → String"],"since":"","typedefns":[]},{"aka":[],"category":"String","deprecated":"","description":"<p>Capitalize first letter.</p>\n","example":"R_.toUpperFirst(<span class=\"hljs-string\">'hello world'</span>) <span class=\"hljs-comment\">// 'Hello world'</span>","name":"toUpperFirst","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["String → String"],"since":"","typedefns":[]},{"aka":[],"category":"Debugging","deprecated":"","description":"<p>Function with side-effect. Logs input to console and returns that input.\nSimilar to &quot;log&quot; but allows to label logged value. Should be used only in development.</p>\n","example":"compose(calculation2, R_.trace(<span class=\"hljs-string\">'Page A'</span>), calculation1); <span class=\"hljs-comment\">// logs \"Page A\" and result of calculation1</span>","name":"trace","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["a → b → b"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Unfolds input object by dot delimetered path inside its keys.</p>\n","example":"R_.unfoldObjectDots({<span class=\"hljs-string\">'a.b.c'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'d.e.f'</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'g'</span>: <span class=\"hljs-number\">3</span>})\n<span class=\"hljs-comment\">// {a: {b: {c: 1}}, d: {e: {f: 2}}, g: 3}</span>","name":"unfoldObjectDots","params":[],"returns":{"description":"","type":""},"see":[],"sigs":["Object → Object"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Creates object mirror from list of keys.</p>\n","example":"<span class=\"hljs-keyword\">const</span> actionTypes = R_.valueMirror([\n<span class=\"hljs-string\">'ITEM_REQUEST'</span>,\n<span class=\"hljs-string\">'ITEM_SUCCESS'</span>,\n<span class=\"hljs-string\">'ITEM_ERROR'</span>,\n]);\n\n<span class=\"hljs-keyword\">const</span> action = { <span class=\"hljs-attr\">type</span>: actionTypes.ITEM_REQUEST };\n\naction.type === actionTypes.ITEM_REQUEST <span class=\"hljs-comment\">// true</span>\nactionTypes.ITEM_SUCCESS <span class=\"hljs-comment\">// \"ITEM_SUCCESS\"</span>","name":"valueMirror","params":[{"description":"<p>List of values representing the keys and values of resulting object.</p>\n","name":"keyList","type":"Array"}],"returns":{"description":"Object, where keys and appropriate values equals to value in `keyList`.","type":"Object"},"see":[],"sigs":["[String] → Object"],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Returns true if the given lens equals to given value</p>\n","example":"R_.viewEq(R.lensIndex(<span class=\"hljs-number\">0</span>), <span class=\"hljs-string\">'foo'</span>, [<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-string\">'bar'</span>, <span class=\"hljs-string\">'baz'</span>]); <span class=\"hljs-comment\">//=&gt; true</span>","name":"viewEq","params":[{"description":"","name":"lens","type":"Lens"},{"description":"<p>value to equal</p>\n","name":"v","type":"*"},{"description":"","name":"x","type":"*"}],"returns":{"description":"","type":"*"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"Object","deprecated":"","description":"<p>Applies custom view function on the given lens</p>\n","example":"R_.viewWith(R.lensIndex(<span class=\"hljs-number\">0</span>), R.pathEq([<span class=\"hljs-string\">'foo'</span>], <span class=\"hljs-string\">'boo'</span>), [{ <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">'boo'</span> }]); <span class=\"hljs-comment\">//=&gt; true</span>\nR_.viewWith(R.lensIndex(<span class=\"hljs-number\">0</span>), R.divide(R.__, <span class=\"hljs-number\">2</span>), [<span class=\"hljs-number\">4</span>]) <span class=\"hljs-comment\">//=&gt; 2</span>","name":"viewWith","params":[{"description":"","name":"lens","type":"Lens"},{"description":"<p>view function</p>\n","name":"v","type":"*"},{"description":"","name":"x","type":"*"}],"returns":{"description":"","type":"*"},"see":[],"sigs":[],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Creates pairs from value and list of values.\nValue is always prepended to the pair.</p>\n","example":"R_.xPairs(<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]) <span class=\"hljs-comment\">// [[1, 2], [1, 3]]</span>","name":"xPairs","params":[],"returns":{"description":"","type":""},"see":["xPairsRight"],"sigs":["a → [b] → [[a, b]]"],"since":"","typedefns":[]},{"aka":[],"category":"List","deprecated":"","description":"<p>Creates pairs from value and list of values.\nValue is always appended as the last item to the pair.</p>\n","example":"R_.xPairsRight(<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]) <span class=\"hljs-comment\">// [[2, 1], [3, 1]]</span>","name":"xPairsRight","params":[],"returns":{"description":"","type":""},"see":["xPairs"],"sigs":["a → [b] → [[b, a]]"],"since":"","typedefns":[]}]
